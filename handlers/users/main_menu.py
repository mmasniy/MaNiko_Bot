from asyncio import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InputFile

from data.config import admins, queue_to_communication, dict_to_communication, sale_product, i
from keyboards.inline import main_menu
from keyboards.inline.callback_datas import go_to_main_callback, main_callback
from keyboards.inline.keyboard_for_product import first_product, first_product_other_img
from keyboards.inline.main_menu import go_main_menu

from loader import dp, bot

from handlers.users.tasting import client
from states import ConnectToAdmin


@dp.callback_query_handler(go_to_main_callback.filter(answer="yes"))
async def go_to_main_menu(call: CallbackQuery, callback_data: dict):
    # await bot.answer_callback_query(callback_query_id=call.id)
    # client = get_user_from_site(call.from_user.id)
    await call.answer()
    # await bot.send_message(call.from_user.id, f"–ß–∏–º –º–∏ –º–æ–∂–µ–º–æ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ, {client.get_name()}? üòÉ",
    #                        reply_markup=main_menu)
    await bot.send_message(call.from_user.id, f"–ß–∏–º –º–∏ –º–æ–∂–µ–º–æ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ, {call.from_user.full_name}? üòÉ",
                           reply_markup=main_menu)
    await bot.send_message(call.from_user.id, f"–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å. üëÜ")


@dp.callback_query_handler(main_callback.filter(tab="connect_to_admin"))
async def connect_to_admin(call: CallbackQuery, callback_data: dict):
    await call.answer()
    if call.from_user.id not in queue_to_communication:
        queue_to_communication.append(call.from_user.id)
        dict_to_communication[str(call.from_user.id)] = call.message
    # print(dict_to_communication[f'{call.from_user.id}'])
    await bot.send_message(admins[0], f"–í–∞—Å –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –¥–æ —á–∞—Ç—É –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: "
                                      f"@{dict_to_communication[f'{call.from_user.id}']['chat']['username']}")
    await bot.send_message(call.from_user.id, "–ó–∞—á–µ–π–∫–∞—Ç–µ —Ö–≤–∏–ª–∏–Ω–∫—É –ø—ñ–¥'—î–¥–Ω—É—é –≤—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ —á–∞—Ç—É üòÉ")
    await sleep(3)
    await bot.send_message(call.from_user.id, "–î–æ —á–∞—Ç—É –ø—ñ–¥'—î–¥–Ω–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ú–∞–≥–∞–∑–∏–Ω—É")
    await ConnectToAdmin.State_Admin.set()


@dp.message_handler(state=ConnectToAdmin.State_Admin)
async def message_to_admin(message: types.Message, state: FSMContext):
    print("+" * 20)
    print(queue_to_communication)
    if message.from_user.id != admins[0] and message.from_user.id in queue_to_communication:
        await bot.send_message(admins[0], message.text)
    elif message.from_user.id not in queue_to_communication:
        async with state.proxy() as data:
            data["message"] = message.text


@dp.message_handler()
async def message_admin_to_client(message: types.Message):
    if message.from_user.id == admins[0] and message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç":
        await dp.storage.close()
        await dp.storage.wait_closed()
        await bot.send_message(queue_to_communication[0],
                               "–ß–∞—Ç –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–¥–µ–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é)",
                               reply_markup=go_main_menu)
        del dict_to_communication[str(queue_to_communication[0])]
        del queue_to_communication[0]
    elif message.from_user.id == admins[0]:
        if len(queue_to_communication) > 0:
            await bot.send_message(queue_to_communication[0], message.text)
    else:
        await bot.send_message(message.from_user.id, f"–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —è –Ω–µ —Ä–æ–∑—É–º—ñ—é, —á–∏–º —Å–∞–º–µ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º. –û–±–µ—Ä—ñ—Ç—å "
                                                     f"–≤—ñ–¥–ø–æ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –Ω–∏–∂—â–µ. –î—è–∫—É—é) üòÉ")
        await bot.send_message(message.from_user.id, f"–ß–∏–º –º–∏ –º–æ–∂–µ–º–æ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ, {message.from_user.full_name}? üòÉ",
                               reply_markup=main_menu)
        await bot.send_message(message.from_user.id, f"–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å. üëÜ")


@dp.callback_query_handler(main_callback.filter(tab="show_promotional_offers"))
async def show_promotional_offers(call: CallbackQuery, callback_data: dict):
    await call.answer()
    await bot.send_message(call.from_user.id, "–†–æ–∑—Å–∏–ª–∫–∞ –±—É–ª–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!")
    await bot.send_photo(call.from_user.id, photo=InputFile("/Users/mmasniy/Desktop/MaNiko_Bot/img/SALE.jpeg"))
    # await sleep(5)
    # await bot.send_message(call.from_user.id, f"{sale_product['1']['name']}\n"
    #                                           f"–¶—ñ–Ω–∞ –∑–≤–∏—á–∞–π–Ω–∞: {sale_product['1']['old_price']}\n"
    #                                           f"–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {sale_product['1']['new_price']}\n"
    #                                           f"{sale_product['1']['charact']}\n"
    #                                           f"{sale_product['1']['about']}",
    #                        reply_markup=first_product)
    # await bot.send_photo(call.from_user.id, photo=InputFile(path_or_bytesio=sale_product['1']['img']),
    #                      reply_markup=first_product_other_img)

    for item in sale_product:
        print(item)
        # await sleep(5)
        await bot.send_message(call.from_user.id, f"{sale_product[str(item)]['name']}\n"
                                                  f"–¶—ñ–Ω–∞ –∑–≤–∏—á–∞–π–Ω–∞: {sale_product[str(item)]['old_price']}\n"
                                                  f"–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {sale_product[str(item)]['new_price']}\n"
                                                  f"{sale_product[str(item)]['charact']}\n"
                                                  f"{sale_product[str(item)]['about']}",
                               reply_markup=first_product)
        await bot.send_photo(call.from_user.id, photo=InputFile(path_or_bytesio=sale_product[str(item)]['img']),
                             reply_markup=first_product_other_img)
