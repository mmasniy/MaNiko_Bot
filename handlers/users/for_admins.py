from asyncio import sleep

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, InputFile, MediaGroup

from data.config import dict_to_communication, queue_to_communication, admins, sale_product, i
from keyboards.inline.admin_buttons import cancel_chat
from keyboards.inline.callback_datas import go_to_main_callback, mail_callback, img_callback
from keyboards.inline.faq_menu import go_to_menu
from keyboards.inline.keyboard_for_product import first_product, first_product_other_img
from loader import dp, bot

from aiogram import types
from aiogram.dispatcher.filters.builtin import Command

from states.for_admins import Admin
from states.mailing import Mailing


@dp.message_handler(Command("close_chat"))
async def close_chat(message: types.Message):
    await Admin.Close_chat.set()
    user = dict_to_communication[str(queue_to_communication[0])]
    await message.answer("–û–±–µ—Ä—ñ—Ç—å id-—é–∑–µ—Ä–∞, —á–∞—Ç –∑ —è–∫–∏–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–∫—Ä–∏—Ç–∏:",
                         reply_markup=InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                             [
                                 InlineKeyboardButton(
                                     text=f"{dict_to_communication[f'{queue_to_communication[0]}']['chat']['id']} - "
                                          f"{dict_to_communication[f'{queue_to_communication[0]}']['chat']['username']}",
                                     callback_data=go_to_main_callback.new(
                                         answer=f'{queue_to_communication[0]}'
                                     )
                                 )
                             ]]))


@dp.callback_query_handler(state=Admin.Close_chat)
async def close_choose_chat(call: CallbackQuery):
    await call.answer()
    await dp.storage.wait_closed()
    # await dp.storage.wait_closed()
    await bot.send_message(admins[0], "–ß–∞—Ç –∑ –∫–ª—ñ—î–Ω—Ç–æ–º –±—É–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    await bot.send_message(queue_to_communication[0], "–ß–∞—Ç –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –±—É–≤ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏–º, –¥—è–∫—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é!",
                           reply_markup=cancel_chat)
    del dict_to_communication[str(queue_to_communication[0])]
    del queue_to_communication[0]


@dp.message_handler(user_id=admins[0], commands=["promo_mail"])
async def start_promo_mail(message: types.Message):
    # await Mailing.Start().set()
    await message.answer("–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –ø–æ –∫–ª—ñ—î–Ω—Ç–∞–º?",
                         reply_markup=InlineKeyboardMarkup(row_width=1, inline_keyboard=[
                             [
                                 InlineKeyboardButton(
                                     text="–î–∞, —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞—Ä–∞–∑",
                                     callback_data=mail_callback.new(
                                         answer="yes"
                                     )
                                 )
                             ],
                             [
                                 InlineKeyboardButton(
                                     text="–ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é",
                                     callback_data=go_to_main_callback.new(
                                         answer="yes"
                                     )
                                 )
                             ]]))


@dp.callback_query_handler(mail_callback.filter(answer="yes"))
async def prepare_promo_email(call: CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, "–†–æ–∑—Å–∏–ª–∫–∞ –±—É–ª–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!")
    await bot.send_photo(call.from_user.id, photo=InputFile("/Users/mmasniy/Desktop/MaNiko_Bot/img/SALE.jpeg"))
    await sleep(5)
    i.append(1)
    await bot.send_message(call.from_user.id, f"{sale_product['1']['name']}\n"
                                              f"–¶—ñ–Ω–∞ –∑–≤–∏—á–∞–π–Ω–∞: {sale_product['1']['old_price']}\n"
                                              f"–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é: {sale_product['1']['new_price']}\n"
                                              f"{sale_product['1']['charact']}\n"
                                              f"{sale_product['1']['about']}",
                           reply_markup=first_product)
    await bot.send_photo(call.from_user.id, photo=InputFile(path_or_bytesio=sale_product['1']['img']),
                         reply_markup=first_product_other_img)
    # for item in sale_product:

    # await bot.send_message(call.from_user.id, f"{call.from_user.first_name}, –í–∞—Å –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∞–∫—Ü—ñ–π–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"
    #                                           f" —Ç–æ–≤–∞—Ä—ñ–≤! –ö–æ–∂–Ω–æ–≥–æ –¥–Ω—è –Ω–∞—à –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –í–∞–º —Ç–æ–≤–∞—Ä–∏ –∑—ñ –∑–Ω–∏–∂–∫–æ—é –∞–±–æ"
    #                                           f" —Ç–æ–≤–∞—Ä–∏, —â–æ –º–∞—é—Ç—å –≤–µ–ª–∏–∫–∏–π –ø–æ–ø–∏—Ç —Å–µ—Ä–µ–¥ –ø–æ–∫—É–ø—Ü—ñ–≤!"
    #                                           f" –î—è–∫—É—î–º–æ, —â–æ –≤–∏ –∑ –Ω–∞–º–∏) üòÄ", reply_markup=)


@dp.callback_query_handler(img_callback.filter(answer="other_img"))
async def send_other_photo(call: CallbackQuery):
    if len(i) == 0:
        other = sale_product[str(1)]['other_img'].split(";")
    else:
        other = sale_product[str(len(i))]['other_img'].split(";")
    for item in other:
        await bot.send_photo(call.from_user.id, photo=InputFile(path_or_bytesio=item))
