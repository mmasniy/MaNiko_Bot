from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove

from keyboards.default import phone_number
from keyboards.inline.callback_datas import meet_callback
from keyboards.inline.main_menu import go_main_menu
from loader import dp, bot
from aiogram import types

from states import GreetingTest
from utils import ClientUser

client = None


@dp.callback_query_handler(meet_callback.filter(answer="yes"))
async def get_answer_yes(call: CallbackQuery, callback_data: dict):
    # await bot.answer_callback_query(callback_query_id=call.id)
    await call.answer()
    await bot.send_message(call.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à–µ —ñ–º'—è üòâ: ")
    await GreetingTest.Q1_name.set()


@dp.message_handler(state=GreetingTest.Q1_name)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    async with state.proxy() as data:
        data["name"] = answer
    await message.answer(f"–î–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–≤'—è–∑–∫—É –≤–≤–µ–¥—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, "
                         f"—Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ +38(0**)***-**-** üòÅ "
                         f"–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –í–∞—à–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—É.", reply_markup=phone_number)
    await GreetingTest.Q2_phone.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=GreetingTest.Q2_phone)
async def answer_q2(message: types.Message, state: FSMContext):
    answer = message.contact.phone_number
    async with state.proxy() as data:
        data["phone"] = answer

    await message.answer(f"–¢–∞–∫–æ–∂ –¥–ª—è –∑–≤'—è–∑–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π email, –±—É–¥–µ–º–æ –¥—É–∂–µ –≤–¥—è—á–Ω—ñ! üòâ",
                         reply_markup=ReplyKeyboardRemove())
    await GreetingTest.Q3_email.set()


@dp.message_handler(state=GreetingTest.Q3_email)
async def answer_q3(message: types.Message, state: FSMContext):
    answer = message.text
    async with state.proxy() as data:
        data["email"] = answer

    data = await state.get_data()
    client = ClientUser(message.from_user.id, data.get("name"), data.get("phone"), data.get("email"))
    client.set_mailing(True)
    client.set_sale(15)
    # client.send_data_to_site()

    await message.answer(f"–î—è–∫—É—î–º–æ –≤–∞–º –∑–∞ –≤–∞—à —á–∞—Å —Ç–∞ —É–≤–∞–≥—É! "
                         f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–Ω–æ, –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ–º–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–≤'—è–∑–æ–∫) ‚ú® "
                         f"–¢–∞–∫–æ–∂ –∑–∞ –≤–∞–º–∏ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∞ –∑–Ω–∏–∂–∫–∞ –≤ 15% –Ω–∞ –ø–µ—Ä—à–µ –∑–∞–º–∞–æ–ª–µ–Ω–Ω—è!  üòâ", reply_markup=go_main_menu)


@dp.callback_query_handler(meet_callback.filter(answer="no"))
async def get_answer_yes(call: CallbackQuery, callback_data: dict):
    # await bot.answer_callback_query(callback_query_id=call.id)
    await call.answer()
    await bot.send_message(call.from_user.id, f"–¢–æ–¥—ñ –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ üòâ",
                           reply_markup=go_main_menu)

    client = ClientUser(call.from_user.id, call.from_user.full_name, None, None)
    # client.send_data_to_site()
